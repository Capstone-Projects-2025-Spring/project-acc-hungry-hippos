"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2994],{95156:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=a(74848),n=a(28453);const s={sidebar_position:3},i="Sequence Diagrams",o={id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 1 - Start Game Session (Host Player)",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/project-acc-hungry-hippos/docs/system-architecture/sequence-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-acc-hungry-hippos/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"tun70323",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Mockups (Gameplay Design)",permalink:"/project-acc-hungry-hippos/docs/system-architecture/mockups"},next:{title:"Development Environment",permalink:"/project-acc-hungry-hippos/docs/system-architecture/development-environment"}},p={},c=[{value:"Use Case 1 - Start Game Session (Host Player)",id:"use-case-1---start-game-session-host-player",level:2},{value:"Use Case 4 \u2013 Control Fruit Queue (AAC User)",id:"use-case-4--control-fruit-queue-aac-user",level:2},{value:"Use Case 5 \u2013 Eats Fruit (Player)",id:"use-case-5--eats-fruit-player",level:2}];function l(e){const t={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,r.jsx)(t.h2,{id:"use-case-1---start-game-session-host-player",children:"Use Case 1 - Start Game Session (Host Player)"}),"\n",(0,r.jsx)(t.p,{children:"*As a player, I want to initiate a new game session from my device, acting as the host, so that other players can join and I can control the game flow. *"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The Host Player opens the Hippo Player App on their device and, after successful authentication via Firebase, navigates to the session creation screen."}),"\n",(0,r.jsx)(t.li,{children:'The Host Player selects the "Create Session" or "Host Game" control within their Hippo Player App interface.'}),"\n",(0,r.jsx)(t.li,{children:"The Hippo Player App sends a request to the Game Conductor App (server) to create a new game session, identifying itself as the session host."}),"\n",(0,r.jsx)(t.li,{children:'The Game Conductor App generates a unique Room Code for the session, registers the Host Player, initializes the game state to "Lobby," and updates its internal lobby management.'}),"\n",(0,r.jsx)(t.li,{children:"The Game Conductor App sends the generated Room Code back to the Host Player's Hippo Player App."}),"\n",(0,r.jsx)(t.li,{children:"The Host Player's Hippo Player App displays the unique Room Code clearly on their screen."}),"\n",(0,r.jsx)(t.li,{children:"The Host Player communicates or shows the Room Code to nearby players."}),"\n",(0,r.jsx)(t.li,{children:'The Game Conductor App updates the Game Conductor Monitor to show the active lobby and connected players. The Host Player\'s Hippo Player App shows a "Waiting for Players" screen.'}),"\n",(0,r.jsx)(t.li,{children:"AAC Device Identification: Separately (either upon launch of their Hippo Player App or via a specific in-app selection by a facilitator), the Hippo Player App on the AAC user's device indicates to the Game Conductor App that it is the designated AAC device for the session. This allows the Game Conductor App to properly direct AAC-specific game state (like current viewport fruits for selection) and process AAC user inputs."}),"\n"]}),"\n",(0,r.jsx)(t.mermaid,{value:'\n   sequenceDiagram\n    participant Host_Player_App as Hippo Player App (Host Player Device)\n    participant GC_App as Game Conductor App (Server)\n    participant Firebase_Auth as Firebase Authentication\n    participant GC_User as Game Conductor User (Facilitator)\n    participant AAC_Player_App as Hippo Player App (AAC User Device)\n\n    Host_Player_App->>Firebase_Auth: Authenticate (get PlayerID)\n    Firebase_Auth--\x3e>Host_Player_App: PlayerID\n    Host_Player_App->>Host_Player_App: Host Player opens app & navigates to session creation screen\n    Host_Player_App->>Host_Player_App: Host Player selects "Create Session" / "Host Game"\n\n    Host_Player_App->>GC_App: Request to create new game session (as host)\n    activate GC_App\n    GC_App->>GC_App: Generates unique Room Code\n    GC_App->>GC_App: Registers Host Player\n    GC_App->>GC_App: Initializes GameState to "Lobby"\n    GC_App->>GC_User: Updates Game Conductor Monitor (shows empty lobby)\n    GC_App--\x3e>Host_Player_App: Sends Room Code\n    deactivate GC_App\n\n    Host_Player_App->>Host_Player_App: Displays unique Room Code on screen\n    Host_Player_App->>Host_Player_App: Host_Player_App shows "Waiting for Players" screen\n    Host_Player_App->>Host_Player_App: Host Player communicates code to nearby players\n\n    AAC_Player_App->>AAC_Player_App: AAC User (or facilitator) indicates this is AAC device\n    AAC_Player_App->>GC_App: Sends "I am AAC device" signal\n    activate GC_App\n    GC_App->>GC_App: Registers AAC device\'s PlayerID internally\n    deactivate GC_App\n'}),"\n",(0,r.jsx)(t.h2,{id:"use-case-4--control-fruit-queue-aac-user",children:"Use Case 4 \u2013 Control Fruit Queue (AAC User)"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"As an AAC user, I want to control the next three fruits in the queue so that I can challenge players."})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"During gameplay, the AAC interface shows options for fruits to appear."}),"\n",(0,r.jsx)(t.li,{children:"The AAC user selects the next fruit from a set of fruit buttons."}),"\n",(0,r.jsx)(t.li,{children:"The selected fruit is queued to drop into the play area."}),"\n",(0,r.jsx)(t.li,{children:"The next 1 fruit is visible on screen to all players."}),"\n"]}),"\n",(0,r.jsx)(t.mermaid,{value:"---\ntitle: Sequence Diagram 4 \u2013 Control Fruit Queue\n---\n\nsequenceDiagram\nparticipant AAC_User as AAC User\nparticipant AAC_Interface as AAC Interface\nparticipant Fruit_Queue as Fruit Queue\nparticipant Firebase as Firebase Realtime DB\nparticipant Hippo_Player as Hippo Player\nparticipant Hippo_Arena as Hippo Arena\n\nAAC_User->>AAC_Interface: View available fruit options\nAAC_User->>AAC_Interface: Select fruit to queue\nAAC_Interface->>Fruit_Queue: Send selected fruit\nFruit_Queue->>Firebase: Update fruit queue in database\nFirebase--\x3e>Fruit_Queue: Confirm update\nFruit_Queue--\x3e>AAC_Interface: Display updated fruit queue\nAAC_Interface--\x3e>AAC_User: Show updated queue (visual feedback)\n\nFirebase--\x3e>Hippo_Arena: Push updated fruit queue\nHippo_Arena--\x3e>Hippo_Player: Display target fruit\n"}),"\n",(0,r.jsx)(t.h2,{id:"use-case-5--eats-fruit-player",children:"Use Case 5 \u2013 Eats Fruit (Player)"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"As a player, I want to move my hippo around the arena and eat the correct fruit so that I can earn points."})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Fruits spawn and are placed randomly across the arena in real time."}),"\n",(0,r.jsx)(t.li,{children:"The player watches the displayed queue to know which fruit is \u201ccorrect.\u201d"}),"\n",(0,r.jsx)(t.li,{children:"The player moves their hippo toward the fruits on the arena."}),"\n",(0,r.jsx)(t.li,{children:"If correct, a point is awarded."}),"\n",(0,r.jsx)(t.li,{children:"If incorrect, no point is awarded (or a penalty is applied)."}),"\n"]}),"\n",(0,r.jsx)(t.mermaid,{value:"---\ntitle: Sequence Diagram 5 \u2013 Eats Fruit\n---\n\nsequenceDiagram\nparticipant Hippo_Player as Hippo Player\nparticipant Hippo_Arena as Hippo Arena\nparticipant Fruit_Queue as Fruit Queue\nparticipant Firebase as Firebase Realtime DB\n\nFruit_Queue->>Hippo_Arena: Spawn fruits randomly\nFirebase--\x3e>Hippo_Player: Push current target fruit\n\nHippo_Player->>Hippo_Arena: Move hippo toward fruit\nHippo_Arena->>Hippo_Arena: Detect collision with fruit\n\nalt Collision with correct fruit\n    Hippo_Arena--\x3e>Hippo_Player: Award point\n    Hippo_Arena--\x3e>Firebase: Update player score\nelse Collision with incorrect fruit\n    Hippo_Arena--\x3e>Hippo_Player: No point (or apply penalty)\nend\n\nFirebase--\x3e>Hippo_Player: Sync updated score\n"})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var r=a(96540);const n={},s=r.createContext(n);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);