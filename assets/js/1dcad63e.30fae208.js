"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2994],{95156:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=n(74848),t=n(28453);const r={sidebar_position:4},o="Sequence Diagrams",i={id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 1 - Start Game Session (Host)",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/project-acc-hungry-hippos/docs/system-architecture/sequence-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-acc-hungry-hippos/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"MKarimF9",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Mockups (Gameplay Design)",permalink:"/project-acc-hungry-hippos/docs/system-architecture/mockups"},next:{title:"Class Diagrams",permalink:"/project-acc-hungry-hippos/docs/system-architecture/class-diagrams"}},c={},l=[{value:"Use Case 1 - Start Game Session (Host)",id:"use-case-1---start-game-session-host",level:2},{value:"Use Case 2 \u2013 Join Game Session (Hippo Player or AAC User)",id:"use-case-2--join-game-session-hippo-player-or-aac-user",level:2},{value:"Use Case 3 \u2013 Start Game (Host)",id:"use-case-3--start-game-host",level:2},{value:"Use Case 4 \u2013 Control Food Queue (AAC User)",id:"use-case-4--control-food-queue-aac-user",level:2},{value:"Use Case 5 \u2013 Eats Food (Player)",id:"use-case-5--eats-food-player",level:2},{value:"Use Case 6 \u2013 Game Timer and End State (Host)",id:"use-case-6--game-timer-and-end-state-host",level:2},{value:"Use Case 7 \u2013 Play Again (AAC User or Player)",id:"use-case-7--play-again-aac-user-or-player",level:2}];function d(e){const a={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,s.jsx)(a.h2,{id:"use-case-1---start-game-session-host",children:"Use Case 1 - Start Game Session (Host)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As a host, I want to initiate a new game session from my device, so that players can join."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:"The host opens the game and chooses to start a new session."}),"\n",(0,s.jsx)(a.li,{children:"A unique game code and QR code is created and shown on their screen."}),"\n",(0,s.jsx)(a.li,{children:"The host shares this code (or QR code) with those who want to join."}),"\n",(0,s.jsx)(a.li,{children:"As players join the game, their hippo avatars and roles appear on the host\u2019s screen."}),"\n",(0,s.jsx)(a.li,{children:"Once at least one AAC user and one hippo player have joined, the host can begin the game.inputs."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:'---\ntitle: Sequence Diagram \u2013 Start Game Session (Host)\n---\n\nsequenceDiagram\n    participant Host\n    participant Server\n    participant Players\n\n    Host->>Server: Select "No code? Create new game!"\n    activate Server\n    Server->>Server: Generate game code + QR code\n    Server--\x3e>Host: Send code and QR for display\n    deactivate Server\n\n    Host->>Players: Share code/QR\n\n    loop Each player joins\n        Players->>Server: Join using code\n        Server->>Server: Register player and assign role\n        Server--\x3e>Host: Show new avatar & role\n    end\n\n    Server--\x3e>Host: One AAC user + one hippo joined\n    Host->>Server: Begin game\n'}),"\n",(0,s.jsx)(a.h2,{id:"use-case-2--join-game-session-hippo-player-or-aac-user",children:"Use Case 2 \u2013 Join Game Session (Hippo Player or AAC User)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As a hippo player or AAC User, I want to join a game session using a code so that I can play the game."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:"A player opens the game on their device."}),"\n",(0,s.jsx)(a.li,{children:"They enter or scan the game code that was shared by the host."}),"\n",(0,s.jsx)(a.li,{children:"They choose a role: Hippo Player or AAC User"}),"\n",(0,s.jsx)(a.li,{children:"Hippo Players also choose a hippo color."}),"\n",(0,s.jsx)(a.li,{children:"Once joined, they wait until the host starts the game."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 2 - Join Game Session\n---\n\nsequenceDiagram\n    participant Host\n    participant Player\n    participant Game\n\n    Host->>Player: Share game code\n    Player->>Game: Open game and enter code\n    Game--\x3e>Player: Validate code / accept\n    alt Select role: Hippo Player\n        Player->>Game: Choose Hippo Player\n        Game--\x3e>Player: Prompt for hippo color\n        Player->>Game: Select color\n    else Select role: AAC User\n        Player->>Game: Choose AAC User\n    end\n    Game--\x3e>Player: Joined lobby (waiting)\n    Player--\x3e>Host: Wait for host to start game\n\n\n"}),"\n",(0,s.jsx)(a.h2,{id:"use-case-3--start-game-host",children:"Use Case 3 \u2013 Start Game (Host)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As a host, I want to start the game after players have joined so that everyone can begin playing."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:'The Host Player sees a "Start Game" button on their game interface.'}),"\n",(0,s.jsx)(a.li,{children:'The Host Player taps "Start Game".'}),"\n",(0,s.jsx)(a.li,{children:"The Host Player's interface sends a command to Firebase to start the game."}),"\n",(0,s.jsx)(a.li,{children:"Firebase updates the central game state to begin a 3-second countdown."}),"\n",(0,s.jsx)(a.li,{children:"All connected player interfaces (Host, AAC User, and other players) receive the updated game state and switch to a gameplay screen, displaying the countdown."}),"\n",(0,s.jsx)(a.li,{children:"When the countdown ends, the game officially starts, and gameplay begins on all connected screens."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 3 \u2013 Start Game\n---\n\nsequenceDiagram\n    participant Host_Player  as Host Player\n    participant AAC_User     as AAC User\n    participant Other_Player as Other Player\n    participant Interface    as Game Interface (Client Apps)\n    participant Firebase     as Firebase Realtime DB\n\n    %% \u2500\u2500\u2500 Host starts the game \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Host_Player ->> Interface: Sees \u201cStart Game\u201d button\n    Host_Player ->> Interface: Taps \u201cStart Game\u201d\n\n    %% \u2500\u2500\u2500 Command sent to backend \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Interface   ->> Firebase  : start_game command\n    Firebase    ->> Firebase : Set state to countdown (3 s)\n\n    %% \u2500\u2500\u2500 Countdown broadcast to all clients \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Firebase  --\x3e> Interface : Broadcast state \u2013 countdown\n    Interface  ->> Host_Player  : Show 3-second countdown\n    Interface  ->> AAC_User     : Show 3-second countdown\n    Interface  ->> Other_Player : Show 3-second countdown\n\n    %% \u2500\u2500\u2500 Countdown ends \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Firebase    ->> Firebase : Countdown ends\n    Firebase    ->> Firebase : Set state to playing\n    Firebase  --\x3e> Interface : Broadcast state \u2013 playing\n\n    %% \u2500\u2500\u2500 Gameplay screen appears \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Interface  ->> Host_Player  : Display gameplay screen\n    Interface  ->> AAC_User     : Display gameplay screen\n    Interface  ->> Other_Player : Display gameplay screen\n"}),"\n",(0,s.jsx)(a.h2,{id:"use-case-4--control-food-queue-aac-user",children:"Use Case 4 \u2013 Control Food Queue (AAC User)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As an AAC user, I want to control the food in the queue so that I can challenge players."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:"During the game, the AAC user sees a menu of foods they can pick from."}),"\n",(0,s.jsx)(a.li,{children:"They tap the foods they want the other players to go after."}),"\n",(0,s.jsx)(a.li,{children:"They can also choose a special effect, like Freeze or Grow"}),"\n",(0,s.jsx)(a.li,{children:"The foods they picked becomes the new target for all the hippos playing."}),"\n",(0,s.jsx)(a.li,{children:"The chosen food appears on screen, and players try to catch it with their hippos."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 4 \u2013 Control Food Queue\n---\n\nsequenceDiagram\n    participant AAC_User as AAC User\n    participant AAC_Interface as AAC Interface (React)\n    participant WebSocket_Client as WebSocket Context\n    participant Game_Server as WebSocket Server\n    participant Phaser_Scene as Phaser Game Scene\n    participant Hippo_Player as Hippo Player (Phaser)\n\n    AAC_User->>AAC_Interface: Select food and (optionally) effect\n    AAC_Interface->>WebSocket_Client: sendMessage({ type: 'AAC_FOOD_SELECTED', payload })\n    WebSocket_Client->>Game_Server: WebSocket \u2192 AAC_FOOD_SELECTED\n\n    Game_Server->>Game_Server: Update currentTargetFoodId and effect\n    Game_Server->>Game_Server: Unshift food into food queue\n\n    Game_Server--\x3e>All: Broadcast AAC_TARGET_FOOD (targetFoodId, foodData, effect)\n\n    AAC_Interface--\x3e>AAC_User: Show \"You selected: [Food]\"\n    Hippo_Player--\x3e>Phaser_Scene: Display new target food in sidebar\n"}),"\n",(0,s.jsx)(a.h2,{id:"use-case-5--eats-food-player",children:"Use Case 5 \u2013 Eats Food (Player)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As a player, I want to move my hippo on my side and eat the correct food so that I can earn points."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:"Food spawn out from the center of the screen toward each hippo player."}),"\n",(0,s.jsx)(a.li,{children:"The screen shows which food the AAC user has selected as the target."}),"\n",(0,s.jsx)(a.li,{children:"The player moves their hippo along their edge of the screen to try to catch that food."}),"\n",(0,s.jsx)(a.li,{children:"If they catch the correct food, they earn a point \u2014 and may receive a bonus effect like growing bigger."}),"\n",(0,s.jsx)(a.li,{children:"If they catch the wrong food, they may lose a point or trigger a penalty like being frozen."}),"\n",(0,s.jsx)(a.li,{children:"The game continues until the timer runs out."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 5 \u2013 Eats Food\n---\n\nsequenceDiagram\n    participant Hippo_Player as Hippo Player (Phaser)\n    participant Phaser_Scene as Game Scene\n    participant Game_Server as WebSocket Server\n    participant WebSocket_Client as WebSocket Context\n    participant AAC_User as AAC User\n\n    Hippo_Player->>Phaser_Scene: Move hippo toward food\n    Phaser_Scene->>Phaser_Scene: Detect collision with food\n\n    alt Collision with correct food\n        Phaser_Scene->>Phaser_Scene: Apply effect (e.g. freeze, grow)\n        Phaser_Scene->>Game_Server: sendMessage(FRUIT_EATEN_BY_PLAYER)\n        Phaser_Scene->>Game_Server: sendMessage(FRUIT_EATEN with instanceId)\n    else Collision with incorrect food\n        Phaser_Scene->>Game_Server: sendMessage(FRUIT_EATEN_BY_PLAYER)\n    end\n\n    Game_Server->>Game_Server: Update scores\n    Game_Server--\x3e>All Clients: Broadcast SCORE_UPDATE_BROADCAST\n    Game_Server--\x3e>All Clients: Broadcast REMOVE_FOOD\n    Game_Server--\x3e>Phaser_Scene: Emit scoreUpdate, removeFruit\n\n    Phaser_Scene--\x3e>Hippo_Player: Update score, remove eaten food\n"}),"\n",(0,s.jsx)(a.h2,{id:"use-case-6--game-timer-and-end-state-host",children:"Use Case 6 \u2013 Game Timer and End State (Host)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As a player or AAC user, I want the game to end automatically after 1 minute so we know when the round is over."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:"The host sees a timer selection screen."}),"\n",(0,s.jsx)(a.li,{children:"There is a 60-second default timer. The host can use buttons or audio to change the time."}),"\n",(0,s.jsx)(a.li,{children:"The host starts the game. See User Case 3."}),"\n",(0,s.jsx)(a.li,{children:"When the timer reaches 0, the game ends."}),"\n",(0,s.jsx)(a.li,{children:"A score screen is shown to all players."}),"\n",(0,s.jsx)(a.li,{children:"The host sees a \u201cPlay Again\u201d or \u201cEnd Game\u201d option."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 6 - Game Timer and End State (Host)\n---\nsequenceDiagram\nparticipant Host as Host Player\nparticipant Game_UI as Game UI\nparticipant Timer as Game Timer\nparticipant All_Players as All Players\nparticipant Firebase as Firebase Realtime DB\n\nHost->>Game_UI: Open timer selection screen\nGame_UI--\x3e>Host: Show default timer (60 seconds)\nHost->>Game_UI: Adjust timer (optional via button/audio)\nHost->>Game_UI: Start game\nGame_UI->>Timer: Start countdown\n\nTimer--\x3e>Game_UI: Timer ticks down\nTimer--\x3e>Game_UI: Timer reaches 0\nGame_UI->>All_Players: Show score screen\nGame_UI->>Host: Show \u201cPlay Again\u201d or \u201cEnd Game\u201d options\n"}),"\n",(0,s.jsx)(a.h2,{id:"use-case-7--play-again-aac-user-or-player",children:"Use Case 7 \u2013 Play Again (AAC User or Player)"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"As an AAC user or player, I want to play another game session after a round ends."})}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsx)(a.li,{children:"After the game ends, if the host taps or uses audio to \u201cPlay Again\u201d, go to Use Case 3."}),"\n",(0,s.jsx)(a.li,{children:"If the host taps or uses audio to \u201cEnd Game\u201d, all users are redirected to the game homescreen."}),"\n"]}),"\n",(0,s.jsx)(a.mermaid,{value:'---\ntitle: Sequence Diagram \u2013 Play Again Option\n---\n\nsequenceDiagram\nparticipant Host as Host Player\nparticipant Game_UI as Game UI\nparticipant All_Players as All Players\nparticipant Firebase as Firebase Realtime DB\n\nalt Host chooses "Play Again"\n    Host->>Game_UI: Tap/voice "Play Again"\n    Game_UI->>Firebase: Reset game state\n    Game_UI->>All_Players: Go to Use Case 3 (Start New Game)\nelse Host chooses "End Game"\n    Host->>Game_UI: Tap/voice "End Game"\n    Game_UI->>All_Players: Redirect to game home screen\nend'})]})}function h(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>i});var s=n(96540);const t={},r=s.createContext(t);function o(e){const a=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);