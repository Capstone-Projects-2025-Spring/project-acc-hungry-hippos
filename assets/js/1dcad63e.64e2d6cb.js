"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2994],{95156:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=t(74848),r=t(28453);const s={sidebar_position:4},i="Sequence Diagrams",o={id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 1 - Start Game Session (Host Player)",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/project-acc-hungry-hippos/docs/system-architecture/sequence-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-acc-hungry-hippos/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"Kostandin Jorgji",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Mockups (Gameplay Design)",permalink:"/project-acc-hungry-hippos/docs/system-architecture/mockups"},next:{title:"Class Diagrams",permalink:"/project-acc-hungry-hippos/docs/system-architecture/class-diagrams"}},c={},l=[{value:"Use Case 1 - Start Game Session (Host Player)",id:"use-case-1---start-game-session-host-player",level:2},{value:"Use Case 2 \u2013 Join Game Session (Player or AAC User)",id:"use-case-2--join-game-session-player-or-aac-user",level:2},{value:"Use Case 3 \u2013 Start Game (Host)",id:"use-case-3--start-game-host",level:2},{value:"Use Case 4 \u2013 Control Fruit Queue (AAC User)",id:"use-case-4--control-fruit-queue-aac-user",level:2},{value:"Use Case 5 \u2013 Eats Fruit (Player)",id:"use-case-5--eats-fruit-player",level:2}];function p(e){const a={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,n.jsx)(a.h2,{id:"use-case-1---start-game-session-host-player",children:"Use Case 1 - Start Game Session (Host Player)"}),"\n",(0,n.jsx)(a.p,{children:"*As a player, I want to initiate a new game session from my device, acting as the host, so that other players can join and I can control the game session. *"}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsx)(a.li,{children:"The Host Player opens their Host Interface and authenticates with the Auth Service (Firebase), navigating to the session creation screen."}),"\n",(0,n.jsx)(a.li,{children:'The Host Player selects the "Create Session" or "Host Game" control on their Host Interface.'}),"\n",(0,n.jsx)(a.li,{children:"The Host Interface sends a request to the Game Server to create a new game session, identifying itself as the session host."}),"\n",(0,n.jsx)(a.li,{children:'The Game Server generates a unique Room Code, registers the Host Player, initializes the game state to "Lobby," and updates its internal lobby management.'}),"\n",(0,n.jsx)(a.li,{children:"The Game Server sends the generated Room Code back to the Host Interface."}),"\n",(0,n.jsx)(a.li,{children:"The Host Interface displays the unique Room Code."}),"\n",(0,n.jsx)(a.li,{children:"The Host Player communicates or shows the Room Code to nearby players."}),"\n",(0,n.jsx)(a.li,{children:'The Host Interface shows a "Waiting for Players" screen.'}),"\n",(0,n.jsx)(a.li,{children:"AAC Device Identification: Separately, the AAC Interface (Hippo_Player_App on AAC user's device) indicates to the Game Server that it is the designated AAC device for the session. This allows the Game Server to properly direct AAC-specific game state and process AAC user inputs."}),"\n"]}),"\n",(0,n.jsx)(a.mermaid,{value:'---\ntitle: Sequence Diagram 1 \u2013 Start Game Session (Host Player) - No Facilitator Monitor\n---\n\nsequenceDiagram\n    participant Host_Interface as Host Player Interface\n    participant Game_Server as Game Server\n    participant Auth_Service as Auth Service (Firebase Auth)\n    participant AAC_Interface as AAC Player Interface\n\n    Host_Interface->>Auth_Service: Authenticate (PlayerID request)\n    Auth_Service--\x3e>Host_Interface: PlayerID received\n\n    Host_Interface->>Host_Interface: Host opens app & navigates to host screen\n    Host_Interface->>Host_Interface: Host selects "Create Session" / "Host Game"\n\n    Host_Interface->>Game_Server: Request new game session (as host)\n    activate Game_Server\n    Game_Server->>Game_Server: Generate unique Room Code\n    Game_Server->>Game_Server: Register Host Player : Init Lobby GameState\n    Game_Server--\x3e>Host_Interface: Send Room Code\n    deactivate Game_Server\n\n    Host_Interface->>Host_Interface: Display Room Code\n    Host_Interface->>Host_Interface: Display "Waiting for Players" screen\n    Host_Interface->>Host_Interface: Host communicates code to nearby players\n\n    AAC_Interface->>AAC_Interface: AAC User (or facilitator) indicates this is an AAC device\n    AAC_Interface->>Game_Server: Send "I am AAC device" signal\n    activate Game_Server\n    Game_Server->>Game_Server: Register AAC device\'s PlayerID internally\n    deactivate Game_Server\n   '}),"\n",(0,n.jsx)(a.h2,{id:"use-case-2--join-game-session-player-or-aac-user",children:"Use Case 2 \u2013 Join Game Session (Player or AAC User)"}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.em,{children:"As a player or AAC User, I want to join a game session using a code so that I can play the game."})}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsx)(a.li,{children:"A player opens the game/ website on their device."}),"\n",(0,n.jsx)(a.li,{children:"They enter the room code or use the audio provided by the host."}),"\n",(0,n.jsx)(a.li,{children:"They tap \u201cJoin Game\u201d or use audio."}),"\n",(0,n.jsx)(a.li,{children:"Once the code is accepted, they are added to the game lobby."}),"\n",(0,n.jsx)(a.li,{children:"The player waits until the host starts the game."}),"\n"]}),"\n",(0,n.jsx)(a.mermaid,{value:'---\ntitle: Sequence Diagram 2 \u2013 Join Game Session\n---\n\nsequenceDiagram\n    participant AAC_User as AAC User\n    participant Hippo_Player as Player\n    participant Interface as AAC/Player Interface\n    participant Vercel as Vercel Hosting\n    participant Firebase as Firebase Realtime DB\n\n    AAC_User->>Vercel: Open game URL\n    Hippo_Player->>Vercel: Open game URL\n    Vercel--\x3e>AAC_User: Serve Interface\n    Vercel--\x3e>Hippo_Player: Serve Interface\n\n    AAC_User->>Interface: Enter room code & tap "Join"\n    Hippo_Player->>Interface: Enter room code & tap "Join"\n\n    Interface->>Firebase: Validate room code\n    Firebase--\x3e>Interface: Room code valid / invalid\n\n    Interface->>Firebase: Add AAC_User to lobby\n    Interface->>Firebase: Add Hippo_Player to lobby\n\n    Firebase--\x3e>Interface: Return lobby data\n    Interface--\x3e>AAC_User: Display lobby\n    Interface--\x3e>Hippo_Player: Display lobby\n\n'}),"\n",(0,n.jsx)(a.h2,{id:"use-case-3--start-game-host",children:"Use Case 3 \u2013 Start Game (Host)"}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.em,{children:"As a host, I want to start the game after players have joined so that everyone can begin playing."})}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsx)(a.li,{children:'The Host Player sees a "Start Game" button on their game interface.'}),"\n",(0,n.jsx)(a.li,{children:'The Host Player taps "Start Game".'}),"\n",(0,n.jsx)(a.li,{children:"The Host Player's interface sends a command to Firebase to start the game."}),"\n",(0,n.jsx)(a.li,{children:"Firebase updates the central game state to begin a 3-second countdown."}),"\n",(0,n.jsx)(a.li,{children:"All connected player interfaces (Host, AAC User, and other players) receive the updated game state and switch to a gameplay screen, displaying the countdown."}),"\n",(0,n.jsx)(a.li,{children:"When the countdown ends, the game officially starts, and gameplay begins on all connected screens."}),"\n"]}),"\n",(0,n.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 3 \u2013 Start Game\n---\n\nsequenceDiagram\n    participant Host_Player  as Host Player\n    participant AAC_User     as AAC User\n    participant Other_Player as Other Player\n    participant Interface    as Game Interface (Client Apps)\n    participant Firebase     as Firebase Realtime DB\n\n    %% \u2500\u2500\u2500 Host starts the game \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Host_Player ->> Interface: Sees \u201cStart Game\u201d button\n    Host_Player ->> Interface: Taps \u201cStart Game\u201d\n\n    %% \u2500\u2500\u2500 Command sent to backend \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Interface   ->> Firebase  : start_game command\n    Firebase    ->> Firebase : Set state to countdown (3 s)\n\n    %% \u2500\u2500\u2500 Countdown broadcast to all clients \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Firebase  --\x3e> Interface : Broadcast state \u2013 countdown\n    Interface  ->> Host_Player  : Show 3-second countdown\n    Interface  ->> AAC_User     : Show 3-second countdown\n    Interface  ->> Other_Player : Show 3-second countdown\n\n    %% \u2500\u2500\u2500 Countdown ends \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Firebase    ->> Firebase : Countdown ends\n    Firebase    ->> Firebase : Set state to playing\n    Firebase  --\x3e> Interface : Broadcast state \u2013 playing\n\n    %% \u2500\u2500\u2500 Gameplay screen appears \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Interface  ->> Host_Player  : Display gameplay screen\n    Interface  ->> AAC_User     : Display gameplay screen\n    Interface  ->> Other_Player : Display gameplay screen\n"}),"\n",(0,n.jsx)(a.h2,{id:"use-case-4--control-fruit-queue-aac-user",children:"Use Case 4 \u2013 Control Fruit Queue (AAC User)"}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.em,{children:"As an AAC user, I want to control the next three fruits in the queue so that I can challenge players."})}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsx)(a.li,{children:"During gameplay, the AAC interface shows options for fruits to appear."}),"\n",(0,n.jsx)(a.li,{children:"The AAC user selects the next fruit from a set of fruit buttons."}),"\n",(0,n.jsx)(a.li,{children:"The selected fruit is queued to drop into the play area."}),"\n",(0,n.jsx)(a.li,{children:"The next 1 fruit is visible on screen to all players."}),"\n"]}),"\n",(0,n.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 4 \u2013 Control Fruit Queue\n---\n\nsequenceDiagram\nparticipant AAC_User as AAC User\nparticipant AAC_Interface as AAC Interface\nparticipant Fruit_Queue as Fruit Queue\nparticipant Firebase as Firebase Realtime DB\nparticipant Hippo_Player as Hippo Player\nparticipant Hippo_Arena as Hippo Arena\n\nAAC_User->>AAC_Interface: View available fruit options\nAAC_User->>AAC_Interface: Select fruit to queue\nAAC_Interface->>Fruit_Queue: Send selected fruit\nFruit_Queue->>Firebase: Update fruit queue in database\nFirebase--\x3e>Fruit_Queue: Confirm update\nFruit_Queue--\x3e>AAC_Interface: Display updated fruit queue\nAAC_Interface--\x3e>AAC_User: Show updated queue (visual feedback)\n\nFirebase--\x3e>Hippo_Arena: Push updated fruit queue\nHippo_Arena--\x3e>Hippo_Player: Display target fruit\n"}),"\n",(0,n.jsx)(a.h2,{id:"use-case-5--eats-fruit-player",children:"Use Case 5 \u2013 Eats Fruit (Player)"}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.em,{children:"As a player, I want to move my hippo around the arena and eat the correct fruit so that I can earn points."})}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsx)(a.li,{children:"Fruits spawn and are placed randomly across the arena in real time."}),"\n",(0,n.jsx)(a.li,{children:"The player watches the displayed queue to know which fruit is \u201ccorrect.\u201d"}),"\n",(0,n.jsx)(a.li,{children:"The player moves their hippo toward the fruits on the arena."}),"\n",(0,n.jsx)(a.li,{children:"If correct, a point is awarded."}),"\n",(0,n.jsx)(a.li,{children:"If incorrect, no point is awarded (or a penalty is applied)."}),"\n"]}),"\n",(0,n.jsx)(a.mermaid,{value:"---\ntitle: Sequence Diagram 5 \u2013 Eats Fruit\n---\n\nsequenceDiagram\nparticipant Hippo_Player as Hippo Player\nparticipant Hippo_Arena as Hippo Arena\nparticipant Fruit_Queue as Fruit Queue\nparticipant Firebase as Firebase Realtime DB\n\nFruit_Queue->>Hippo_Arena: Spawn fruits randomly\nFirebase--\x3e>Hippo_Player: Push current target fruit\n\nHippo_Player->>Hippo_Arena: Move hippo toward fruit\nHippo_Arena->>Hippo_Arena: Detect collision with fruit\n\nalt Collision with correct fruit\n    Hippo_Arena--\x3e>Hippo_Player: Award point\n    Hippo_Arena--\x3e>Firebase: Update player score\nelse Collision with incorrect fruit\n    Hippo_Arena--\x3e>Hippo_Player: No point (or apply penalty)\nend\n\nFirebase--\x3e>Hippo_Player: Sync updated score\n"})]})}function d(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>o});var n=t(96540);const r={},s=n.createContext(r);function i(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);