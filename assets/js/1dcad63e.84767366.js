"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2994],{95156:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=t(74848),a=t(28453);const i={sidebar_position:3},s="Sequence Diagrams",o={id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 4 \u2013 Control Fruit Queue (AAC User)",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/project-acc-hungry-hippos/docs/system-architecture/sequence-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-acc-hungry-hippos/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"Jasmine",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Mockups (Gameplay Design)",permalink:"/project-acc-hungry-hippos/docs/system-architecture/mockups"},next:{title:"Development Environment",permalink:"/project-acc-hungry-hippos/docs/system-architecture/development-environment"}},u={},c=[{value:"Use Case 4 \u2013 Control Fruit Queue (AAC User)",id:"use-case-4--control-fruit-queue-aac-user",level:2},{value:"Use Case 5 \u2013 Eats Fruit (Player)",id:"use-case-5--eats-fruit-player",level:2}];function p(e){const r={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,n.jsx)(r.h2,{id:"use-case-4--control-fruit-queue-aac-user",children:"Use Case 4 \u2013 Control Fruit Queue (AAC User)"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.em,{children:"As an AAC user, I want to control the next three fruits in the queue so that I can challenge players."})}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsx)(r.li,{children:"During gameplay, the AAC interface shows options for fruits to appear."}),"\n",(0,n.jsx)(r.li,{children:"The AAC user selects the next fruit from a set of fruit buttons."}),"\n",(0,n.jsx)(r.li,{children:"The selected fruit is queued to drop into the play area."}),"\n",(0,n.jsx)(r.li,{children:"The next 1 fruit are visible on screen to all players."}),"\n"]}),"\n",(0,n.jsx)(r.mermaid,{value:"---\ntitle: Sequence Diagram 4 \u2013 Control Fruit Queue\n---\n\nsequenceDiagram\nparticipant AAC_User as AAC User\nparticipant AAC_Interface as AAC Interface\nparticipant Fruit_Queue as Fruit Queue\nparticipant Firebase as Firebase Realtime DB\nparticipant Hippo_Player as Hippo Player\nparticipant Hippo_Arena as Hippo Arena\n\nAAC_User->>AAC_Interface: View available fruit options\nAAC_User->>AAC_Interface: Select fruit to queue\nAAC_Interface->>Fruit_Queue: Send selected fruit\nFruit_Queue->>Firebase: Update fruit queue in database\nFirebase--\x3e>Fruit_Queue: Confirm update\nFruit_Queue--\x3e>AAC_Interface: Display updated fruit queue\nAAC_Interface--\x3e>AAC_User: Show updated queue (visual feedback)\n\nFirebase--\x3e>Hippo_Arena: Push updated fruit queue\nHippo_Arena--\x3e>Hippo_Player: Display target fruit\n"}),"\n",(0,n.jsx)(r.h2,{id:"use-case-5--eats-fruit-player",children:"Use Case 5 \u2013 Eats Fruit (Player)"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.em,{children:"As a player, I want to move my hippo around the arena and eat the correct fruit so that I can earn points."})}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsx)(r.li,{children:"Fruits spawn and are placed randomly across the arena in real time."}),"\n",(0,n.jsx)(r.li,{children:"The player watches the displayed queue to know which fruit is \u201ccorrect.\u201d"}),"\n",(0,n.jsx)(r.li,{children:"The player moves their hippo toward fruits on the arena."}),"\n",(0,n.jsx)(r.li,{children:"If correct, a point is awarded."}),"\n",(0,n.jsx)(r.li,{children:"If incorrect, no point is awarded (or a penalty is applied)."}),"\n"]}),"\n",(0,n.jsx)(r.mermaid,{value:"---\ntitle: Sequence Diagram 5 \u2013 Eats Fruit\n---\n\nsequenceDiagram\nparticipant Hippo_Player as Hippo Player\nparticipant Hippo_Arena as Hippo Arena\nparticipant Fruit_Queue as Fruit Queue\nparticipant Firebase as Firebase Realtime DB\n\nFruit_Queue->>Hippo_Arena: Spawn fruits randomly\nFirebase--\x3e>Hippo_Player: Push current target fruit\n\nHippo_Player->>Hippo_Arena: Move hippo toward fruit\nHippo_Arena->>Hippo_Arena: Detect collision with fruit\n\nalt Collision with correct fruit\n    Hippo_Arena--\x3e>Hippo_Player: Award point\n    Hippo_Arena--\x3e>Firebase: Update player score\nelse Collision with incorrect fruit\n    Hippo_Arena--\x3e>Hippo_Player: No point (or apply penalty)\nend\n\nFirebase--\x3e>Hippo_Player: Sync updated score\n"})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>o});var n=t(96540);const a={},i=n.createContext(a);function s(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);